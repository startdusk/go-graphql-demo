// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	data "github.com/startdusk/twitter/data"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AuthTokenService is an autogenerated mock type for the AuthTokenService type
type AuthTokenService struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: ctx, user
func (_m *AuthTokenService) CreateAccessToken(ctx context.Context, user data.User) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, data.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, data.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: ctx, user, tokenID
func (_m *AuthTokenService) CreateRefreshToken(ctx context.Context, user data.User, tokenID string) (string, time.Time, error) {
	ret := _m.Called(ctx, user, tokenID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, data.User, string) string); ok {
		r0 = rf(ctx, user, tokenID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(context.Context, data.User, string) time.Time); ok {
		r1 = rf(ctx, user, tokenID)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, data.User, string) error); ok {
		r2 = rf(ctx, user, tokenID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ParseToken provides a mock function with given fields: ctx, payload
func (_m *AuthTokenService) ParseToken(ctx context.Context, payload string) (data.AuthToken, error) {
	ret := _m.Called(ctx, payload)

	var r0 data.AuthToken
	if rf, ok := ret.Get(0).(func(context.Context, string) data.AuthToken); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(data.AuthToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTokenFromRequest provides a mock function with given fields: ctx, r
func (_m *AuthTokenService) ParseTokenFromRequest(ctx context.Context, r *http.Request) (data.AuthToken, error) {
	ret := _m.Called(ctx, r)

	var r0 data.AuthToken
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) data.AuthToken); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(data.AuthToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthTokenService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthTokenService creates a new instance of AuthTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthTokenService(t mockConstructorTestingTNewAuthTokenService) *AuthTokenService {
	mock := &AuthTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
